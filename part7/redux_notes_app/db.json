{
  "notes": [
    {
      "content": "the app state is in redux store",
      "important": true,
      "id": 1
    },
    {
      "content": "state changes are made with actions",
      "important": false,
      "id": 2
    },
    {
      "content": "reducers handle how state changes based on actions",
      "important": true,
      "id": 3
    },
    {
      "content": "selectors help retrieve specific data from the store",
      "important": false,
      "id": 4
    },
    {
      "content": "middleware like redux-thunk or redux-saga can manage async logic",
      "important": true,
      "id": 5
    },
    {
      "content": "combineReducers can split state logic into multiple functions",
      "important": false,
      "id": 6
    },
    {
      "content": "store.dispatch is used to trigger an action",
      "important": true,
      "id": 7
    },
    {
      "content": "the redux devtools extension helps debug state changes",
      "important": false,
      "id": 8
    },
    {
      "content": "react-redux provides hooks like useSelector and useDispatch for easy integration",
      "important": true,
      "id": 9
    },
    {
      "content": "every action should have a type and sometimes a payload",
      "important": false,
      "id": 10
    },
    {
      "content": "using TypeScript with Redux improves type safety and reduces runtime errors",
      "important": true,
      "id": 11
    },
    {
      "content": "redux-toolkit simplifies reducers and action creation with createSlice",
      "important": true,
      "id": 12
    },
    {
      "content": "immutability of state is crucial to avoid unexpected updates",
      "important": false,
      "id": 13
    },
    {
      "content": "combine middleware for logging, async, and analytics in one store setup",
      "important": false,
      "id": 14
    },
    {
      "content": "use createAsyncThunk for handling async operations cleanly",
      "important": true,
      "id": 15
    },
    {
      "content": "avoid deeply nested state; normalize data for better performance",
      "important": false,
      "id": 16
    },
    {
      "content": "always keep reducers pure â€” no side effects, API calls, or random values",
      "important": true,
      "id": 17
    },
    {
      "content": "actions describe *what happened*, not *how to change it*",
      "important": false,
      "id": 18
    },
    {
      "content": "persist store data using redux-persist for offline functionality",
      "important": true,
      "id": 19
    },
    {
      "content": "reselect library helps with memoized selectors and better performance",
      "important": false,
      "id": 20
    }
  ]
}
